{"version":3,"sources":["serviceWorker.js","routes/HomePage.js","Helpers/FetchData.js","components/SongCard.js","Helpers/GenerateInfo.js","routes/SongSearchPage.js","routes/PlaylistSearchPage.js","routes/AboutPage.js","components/BackgroundSvgPaths.js","Helpers/LightenColours.js","routes/SongResultsPage.js","components/Histogram.js","routes/PlaylistResultsPage.js","App.js","index.js","hellify.png"],"names":["Boolean","window","location","hostname","match","HomePage","className","style","display","justifyContent","margin","src","hellify","alt","to","React","Component","FetchData","getToken","a","fetch","response","json","body","status","Error","message","fetchData","input","type","searchType","data","requestToken","token","myToken","myOptions","headers","Authorization","url","replace","SongCard","onClick","this","props","buttonClick","artwork","name","album","artist","GenerateInfo","playlists","forEach","playlist","push","playlistId","id","songs","song","artists","art","images","songId","SongSearchPage","handleSubmit","event","preventDefault","state","searchQuery","setState","previousSearchQuery","waitForFetch","setTimeout","prompt","clearTimeout","songListRaw","tracks","items","length","results","generateSongInfo","simplifiedSongList","populateGrid","handleChange","bind","onCardClick","target","value","chain","history","pathname","search","cardGrid","i","substring","key","onSubmit","placeholder","onChange","marginTop","position","top","height","PlaylistSearchPage","playlistsRaw","generatePlaylistInfo","playlistIds","gridGap","hash","plId","width","frameBorder","allowTransparency","allow","AboutPage","BackgroundSvgPaths","viewBox","shiftDown","fill","d","LightenColours","RGB_Linear_Shade","p","c","parseInt","r","Math","round","split","b","t","P","slice","LightTooltip","withStyles","theme","tooltip","backgroundColor","palette","common","white","color","boxShadow","shadows","lineHeight","textAlign","arrow","Tooltip","SongResultsPage","componentDidMount","waitForFeatures","waitFortrack","waitForAlbum","generateCharts","setBgColours","invalid","rawTrack","embedAlbum","method","JSON","stringify","sortTrackData","songCard","explicit","expl","rawFeatures","live","acoustic","instrumental","musicality","mode","modality","console","log","rawAlbum","rawAnalysis","available_markets","options","bgImage","albumColours1","albumColours2","albumColours3","albumColours4","img","document","querySelector","crossOrigin","colorThief","ColorThief","addEventListener","getColor","Vibrant","getPalette","then","rgb1","getRgb","rgb2","DarkVibrant","rgb3","DarkMuted","rgb4","Muted","marginLeft","fontSize","padding","paddingLeft","alignContent","paddingRight","marginBottom","enterTouchDelay","title","tempo","time_signature","acousticness","liveness","speechiness","popularity","duration_ms","toFixed","paddingBottom","release_date","album_type","label","marginRight","geography","geographies","map","geo","find","s","properties","ISO_A2","rsmKey","Histogram","generateChart","songIndex","generateScore","histogram","chartData","chartOptions","PlaylistResultsPage","waitFortracks","plTracks","plTrackIds","n","track","featureData","sortData","score","finalScore","featureInfo1","featureInfo2","featureInfoColour","fit","simplify","danceHist","datasets","dance","index","danceIndex","energyHist","energy","energyIndex","valenceHist","valence","valenceIndex","errorVis","stDevs","sigmas","visibility","border","App","float","path","exact","component","render","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.b3483fd3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. SongSearchPage is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Router, Link } from \"react-router-dom\";\nimport hellify from \"../hellify.png\";\nimport '../styles/HomePage.css';\n\n/**\n * Takes song data as props and produces card elements for all data entered. Renders the card grid to he DOM.\n */\nclass HomePage extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div style={{display: \"flex\", justifyContent: \"center\", margin: \"4vh\"}}>\n                        <img src={hellify} className=\"Logo\" alt=\"logo\"/>\n                    </div>\n                    <div className=\"Container-home\">\n                        <div>\n                            <h1>Explore your song</h1>\n                            <p>\n                                Discover detailed analytics for your music.\n                                Go deeper and find out what Spotify's algorithms say about your songs!\n                            </p>\n                        </div>\n                        <div>\n                            <h1>Find the right playlist for your song</h1>\n                            <p>\n                                Choose a song and see how well it fits in a given playlist.\n                            </p>\n                        </div>\n                        <div>\n                            <Link to=\"/song\" >\n                                <button>Analyse a song</button>\n                            </Link>\n\n                        </div>\n                        <div>\n                            <Link to=\"/playlist\">\n                                <button>Choose a playlist</button>\n                            </Link>\n                        </div>\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default HomePage;","/**\n * Helper class with methods which formulate and make calls to the spotify web API.\n */\nclass FetchData {\n    /**\n     * Calls my node server which requests a Spotify client access token.\n     * @returns {Promise} Json body containing Spotify client token and test message\n     */\n    static getToken = async () => {\n        const response = await fetch('/authenticate');\n        const body = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        return body;\n    };\n    /**\n     * Calls Spotify API using client access token. Takes an input string, a call type string (search or analysis) and a string\n     * for search type ('tracks/artists/playlists' for searches or 'audio-features/?ids=' for audio data).\n     * @returns {Promise} Spotify search or audio analysis data\n     */\n    static fetchData = async (input, type, searchType) => {\n        let data = '';\n        const requestToken = await this.getToken();\n        const token = requestToken.myToken;\n        var myOptions = {\n            headers: {\n                Authorization: 'Bearer ' + token\n            }\n        }\n        let url = \"\";\n        if (type === \"search\") {\n            // Replaces special characters in query:\n            input = input.replace(/\\\\|#|%|{|}|\\^|\\||`/g, \"\")\n            const endpoint = 'https://api.spotify.com/v1/search?';\n            const query = 'q=' + input;\n            const type = '&type=' + searchType;\n            url = endpoint + query + type;\n        } else if (type === \"analysis\") {\n            const endpoint = 'https://api.spotify.com/v1/';\n            const ty = searchType;\n            const id = input;\n            url = endpoint + ty + id;\n        }\n        const response = await fetch(url, myOptions)\n        data = await response.json();\n        return data;\n    }\n}\n\nexport default FetchData;","import React from 'react';\nimport '../styles/SongCard.css';\n\nclass SongCard extends React.Component {\n    onCardClick() {\n        //console.log(this.props.name)\n    }\n\n    render() {\n        return (\n            <div className=\"Result-card\" onClick={this.props.buttonClick}>\n                <div className=\"Container-song\">\n                    <div>\n                        <img className=\"Album-art\" src={this.props.artwork} alt=\"album artwork\"></img>\n                    </div>\n                    <div className=\"Song-info\">\n                            <p className=\"Info-name\" >{this.props.name}</p>\n                            <p className=\"Info\" >{this.props.album}</p>\n                            <p className=\"Info\">{this.props.artist}</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default SongCard;","class GenerateInfo {\n    static generatePlaylistInfo(data) {\n        const playlists = []\n\n        data.forEach(playlist => {\n                playlists.push({\n                    playlistId: playlist.id\n                });\n            }\n        );\n        return playlists;\n    }\n\n    static generateSongInfo(data) {\n        const songs = []\n\n        data.forEach(song => {\n                songs.push({\n                    name: song.name,\n                    artist: song.artists[0].name,\n                    album: song.album.name,\n                    art: song.album.images[1].url,\n                    songId: song.id\n                });\n            }\n        );\n        return songs;\n    }\n}\n\nexport default GenerateInfo;","import React from 'react';\nimport hellify from '../hellify.png';\nimport '../styles/SearchPage.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport FetchData from '../Helpers/FetchData';\nimport SongCard from \"../components/SongCard\";\nimport GenerateInfo from '../Helpers/GenerateInfo'\n\nclass SongSearchPage extends React.Component {\n  /**\n   * Default constructor for main app.\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: 'NO_TOKEN(CLIENT)',\n      songListRaw: null,\n      simplifiedSongList: null,\n      searchQuery: '',\n      previousSearchQuery: '',\n      results: <div className=\"Margin\" ></div>,\n      prompt: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onCardClick = this.onCardClick.bind(this);\n  }\n\n  /**\n   * Updates the state {searchQuery} whenever a letter is typed in the search box.\n   * @param onChange event for search box input\n   */\n  handleChange(event) {\n    this.setState({ searchQuery: event.target.value });\n  }\n\n  /**\n   * Handles submit of search query.\n   * @param onSubmit event for search submit.\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    // Don't fetch if there is no query:\n    if (this.state.searchQuery === \"\") {\n      return;\n    }\n    this.setState({previousSearchQuery: this.state.searchQuery})\n    if (this.state.searchQuery == this.state.previousSearchQuery) {\n      return\n    }\n\n    this.waitForFetch();\n  }\n\n  waitForFetch = async () => {\n    // Set timeout for 'searching' message to appear:\n    setTimeout(() => {\n      this.setState({\n        prompt: \"Searching for results...\"\n      });\n    }, 1000);\n    // Get search results:\n    const data = await FetchData.fetchData(this.state.searchQuery, 'search','track');\n    // Clear all timeouts (as search is complete):\n    let id = setTimeout(function() {}, 0);\n    while (id--) {\n      window.clearTimeout(id);\n      this.setState({\n        prompt: null\n      });\n    }\n    // Set state to returned data:\n    this.setState({songListRaw: data})\n    // Error handling if no search results are returned:\n    if (data.tracks.items.length === 0) {\n      this.setState({\n        prompt: \"No results found!\",\n        results: <div className=\"Margin\" ></div>\n      });\n      return;\n    }\n    const songs = GenerateInfo.generateSongInfo(this.state.songListRaw.tracks.items);\n    this.setState({simplifiedSongList: songs});\n    this.setState({\n      results:\n          <div className=\"Cards\" >\n            {this.populateGrid(this.state.simplifiedSongList)}\n          </div>\n    })\n  };\n\n  /**\n   * When a song card is clicked, redirect to the results page passing the song id as the react router\n   * history object prop 'props.location.search'.\n   * @param songId\n   */\n  onCardClick(songId, name, album, artist, art) {\n    if (this.props.chain === \"song\") {\n      this.props.history.push({\n        pathname: '/songs',\n        search: songId\n      });\n    }\n    if (this.props.chain === \"playlist\") {\n      this.props.history.push({\n        pathname: '/song-playlist',\n        search: songId,\n        state: {\n          name: name,\n          album: album,\n          artist: artist,\n          art: art\n        }\n      });\n    }\n  }\n\n  populateGrid(data) {\n    // Else generate cards.\n    if (data == null) {\n      return null;\n    }\n    var cardGrid = [];\n    for (var i=0; i < data.length; i++) {\n\n      let name = data[i].name;\n      let album = data[i].album;;\n      let artist = data[i].artist;\n      let songId = data[i].songId;\n      // Truncate info if it is too long to fit on card:\n      if (data[i].name.length > 30) {\n        name = data[i].name.substring(0, 30) + '...'\n      }\n      if (data[i].album.length > 20) {\n        album = data[i].album.substring(0, 20) + '...'\n      }\n      if (data[i].artist.length > 40) {\n        artist = data[i].artist.substring(0, 40) + '...'\n      }\n\n      cardGrid.push(\n          <p key={i} className=\"Card-p\"><SongCard\n              buttonClick={this.onCardClick.bind(this, songId, name, album, artist, data[i].art)}\n              name={name}\n              album={album}\n              artist={artist}\n              artwork={data[i].art}\n              songId={songId}\n          /></p>\n      )\n    }\n    return cardGrid;\n  }\n\n  /**\n   * Renders main page to the DOM.\n   */\n  render() {\n    return (\n        <Router>\n          <div className=\"Search\">\n            <header className=\"Search-header\" >\n              <img src={hellify} className=\"Search-logo\" alt=\"logo\"/>\n              <p>Search for a song</p>\n              <p>or</p>\n              <p>Enter a Spotify song link</p>\n              <div className=\"searchbar\">\n                <form onSubmit={this.handleSubmit}>\n                  <input className=\"Search-box\" type=\"text\" value={this.state.value} placeholder=\"Search..\" onChange={this.handleChange}></input>\n                  <button id=\"searchclick\" type=\"submit\">Search</button>\n                </form>\n              </div>\n              <div style={{marginTop: \"3vh\", position: \"absolute\", top: \"45vh\"}}>\n                {this.state.prompt}\n              </div>\n            </header>\n            <div style={{marginTop: \"4vh\"}}>\n              {this.state.results}\n            </div>\n            <div id=\"footer\" style={{height: \"36.6vh\"}}/>\n          </div>\n        </Router>\n    );\n  }\n}\n\nexport default SongSearchPage;\n","import React from 'react';\nimport hellify from '../hellify.png';\nimport '../styles/SearchPage.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport FetchData from '../Helpers/FetchData';\nimport SongCard from \"../components/SongCard\";\nimport GenerateInfo from \"../Helpers/GenerateInfo\";\n\nclass PlaylistSearchPage extends React.Component {\n    /**\n     * Default constructor for main app.\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            token: 'NO_TOKEN(CLIENT)',\n            playlistsRaw: null,\n            playlistIds: null,\n            searchQuery: '',\n            previousSearchQuery: '',\n            results: <div className=\"Margin\"></div>,\n            prompt: null\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.onCardClick = this.onCardClick.bind(this);\n    }\n\n    /**\n     * Updates the state {searchQuery} whenever a letter is typed in the search box.\n     * @param onChange event for search box input\n     */\n    handleChange(event) {\n        this.setState({ searchQuery: event.target.value });\n    }\n\n    /**\n     * Handles submit of search query.\n     * @param onSubmit event for search submit.\n     */\n    handleSubmit = event => {\n        event.preventDefault();\n        // Don't fetch if there is no query:\n        if (this.state.searchQuery === \"\") {\n            return;\n        }\n        this.setState({previousSearchQuery: this.state.searchQuery})\n        if (this.state.searchQuery == this.state.previousSearchQuery) {\n            return\n        }\n\n        this.waitForFetch();\n    }\n\n    waitForFetch = async () => {\n        // Set timeout for 'searching' message to appear:\n        setTimeout(() => {\n            this.setState({\n                prompt: \"Searching for results...\"\n            });\n        }, 1000);\n        // Fetch search data:\n        const data = await FetchData.fetchData(this.state.searchQuery,'search','playlist');\n        // Clear all timeouts (as search is complete):\n        let id = setTimeout(function() {}, 0);\n        while (id--) {\n            window.clearTimeout(id);\n            this.setState({\n                prompt: null\n            });\n        }\n        // Set state to returned data:\n        this.setState({playlistsRaw: data})\n        // Error handling if no search results are returned:\n        if (data.playlists.items.length === 0) {\n            this.setState({\n                prompt: \"No results found!\",\n                results: <div className=\"Margin\" ></div>\n            });\n            return;\n        }\n        const playlists = GenerateInfo.generatePlaylistInfo(this.state.playlistsRaw.playlists.items);\n        this.setState({playlistIds: playlists});\n        this.setState({\n            results:\n                <div className=\"Cards\" style={{gridGap: \"5vh\"}}>\n                    {this.populateGrid(this.state.playlistIds)}\n                </div>\n        })\n    };\n\n    /**\n     * When a song card is clicked, redirect to the results page passing the song id as the react router\n     * history object prop 'props.location.search'.\n     * @param songId\n     */\n    onCardClick(playlistId, name, album, artist, art) {\n        this.props.history.push({\n            pathname: '/playlists',\n            search: this.props.location.search,\n            hash: playlistId,\n            state: {\n                name: name,\n                album: album,\n                artist: artist,\n                art: art\n            }\n        });\n    }\n\n    populateGrid(data) {\n        // Else generate cards.\n        if (data == null) {\n            return null;\n        }\n        var cardGrid = [];\n        for (var i=0; i < data.length / 2; i++) {\n\n            let plId = data[i].playlistId;\n\n            cardGrid.push(\n                <p className=\"Playlist-p\" key={i}>\n                    <h2 onClick={this.onCardClick.bind(this, plId,\n                        this.props.location.state.name,\n                        this.props.location.state.album,\n                        this.props.location.state.artist,\n                        this.props.location.state.art\n                    )}>\n                        Select Playlist\n                    </h2>\n                    <p className=\"Playlist-p\" >\n                        <iframe\n                            src={\"https://open.spotify.com/embed/playlist/\" + plId}\n                            width=\"350\"\n                            height=\"350\"\n                            frameBorder=\"0\"\n                            allowTransparency=\"true\"\n                            allow=\"encrypted-media\"\n                        ></iframe>\n                    </p>\n                </p>\n            )\n        }\n        return cardGrid;\n    }\n\n    /**\n     * Renders main page to the DOM.\n     */\n    render() {\n        return (\n            <Router>\n                <div className=\"Search\">\n                    <header className=\"Search-header\" >\n                        <div className=\"Grid\">\n                            <div>\n                                <p>\n                                    <img src={hellify} className=\"Search-logo\" alt=\"logo\"/>\n                                </p>\n                                <p>Search for a playlist</p>\n                                <p>or</p>\n                                <p>Enter a Spotify playlist link</p>\n                                <p></p>\n                                <div className=\"searchbar\">\n                                    <form onSubmit={this.handleSubmit}>\n                                        <input className=\"Search-box\" type=\"text\" value={this.state.value} placeholder=\"Search..\" onChange={this.handleChange}></input>\n                                        <button id=\"searchclick\" type=\"submit\">Search</button>\n                                    </form>\n                                </div>\n                            </div>\n                            <div>\n                                <p>Song being analysed:</p>\n                                <p className=\"Card-p\"><SongCard\n                                    name={this.props.location.state.name}\n                                    album={this.props.location.state.album}\n                                    artist={this.props.location.state.artist}\n                                    artwork={this.props.location.state.art}\n                                    songId={this.props.location.state.songId}\n                                /></p>\n                            </div>\n                        </div>\n                        <div style={{marginTop: \"3vh\", position: \"absolute\", top: \"45vh\"}}>\n                            {this.state.prompt}\n                        </div>\n                    </header>\n                    {this.state.results}\n                    <div id=\"footer\" style={{height: \"36.6vh\"}}/>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default PlaylistSearchPage;","import React from 'react';\n\nclass AboutPage extends React.Component {\n    render() {\n        return (\n            <div>\n                About {this.props.search}\n            </div>\n        )\n    }\n}\n\nexport default AboutPage;","import React from 'react';\nimport \"../styles/BackgroundSvgPaths.css\";\n\n\nclass BackgroundSvgPaths extends React.Component {\n    render() {\n        return (\n            <div className=\"background\">\n                <svg viewBox=\"0 0 1920 2140\" style={{top: this.props.shiftDown}}>\n                    <path fill={this.props.fill}\n                          d=\"M 0.00,1811.00\n           C 0.00,1811.00 0.00,1214.00 0.00,1214.00\n             0.00,1214.00 0.99,1206.61 0.99,1206.61\n             0.99,1206.61 9.00,1201.00 9.00,1201.00\n             9.00,1201.00 25.00,1191.20 25.00,1191.20\n             25.00,1191.20 107.00,1141.20 107.00,1141.20\n             107.00,1141.20 449.00,932.80 449.00,932.80\n             449.00,932.80 726.00,763.81 726.00,763.81\n             726.00,763.81 1059.00,560.81 1059.00,560.81\n             1059.00,560.81 1328.00,396.81 1328.00,396.81\n             1328.00,396.81 1450.00,322.58 1450.00,322.58\n             1450.00,322.58 1595.00,234.19 1595.00,234.19\n             1595.00,234.19 1776.00,123.80 1776.00,123.80\n             1776.00,123.80 1875.00,63.40 1875.00,63.40\n             1875.00,63.40 1904.00,45.80 1904.00,45.80\n             1904.00,45.80 1920.00,37.00 1920.00,37.00\n             1920.00,37.00 1920.00,633.00 1920.00,633.00\n             1920.00,633.00 1918.98,640.82 1918.98,640.82\n             1918.98,640.82 1911.00,647.00 1911.00,647.00\n             1911.00,647.00 1895.00,656.80 1895.00,656.80\n             1895.00,656.80 1814.00,706.05 1814.00,706.05\n             1814.00,706.05 1670.00,793.81 1670.00,793.81\n             1670.00,793.81 1470.00,915.80 1470.00,915.80\n             1470.00,915.80 1271.00,1037.19 1271.00,1037.19\n             1271.00,1037.19 961.00,1226.19 961.00,1226.19\n             961.00,1226.19 628.00,1429.19 628.00,1429.19\n             628.00,1429.19 465.00,1528.42 465.00,1528.42\n             465.00,1528.42 155.00,1717.42 155.00,1717.42\n             155.00,1717.42 51.00,1780.81 51.00,1780.81\n             51.00,1780.81 18.00,1801.00 18.00,1801.00\n             18.00,1801.00 0.00,1811.00 0.00,1811.00 Z\" />\n                </svg>\n            </div>\n        )\n    }\n}\n\nexport default BackgroundSvgPaths;","class LightenColours {\n    static RGB_Linear_Shade=(p,c)=>{\n        var i=parseInt,r=Math.round,[a,b,c,d]=c.split(\",\"),P=p<0,t=P?0:255*p,P=P?1+p:1-p;\n        return\"rgb\"+(d?\"a(\":\"(\")+r(i(a[3]==\"a\"?a.slice(5):a.slice(4))*P+t)+\",\"+r(i(b)*P+t)+\",\"+r(i(c)*P+t)+(d?\",\"+d:\")\");\n    }\n}\n\nexport default LightenColours;","import React from 'react';\nimport FetchData from \"../Helpers/FetchData\";\nimport \"../styles/SongResultsPage.css\";\nimport {HorizontalBar} from 'react-chartjs-2';\nimport SongCard from \"../components/SongCard\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\"\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { withStyles } from '@material-ui/core/styles';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport ColorThief from \"color-thief\";\nimport * as Vibrant from \"node-vibrant\";\nimport BackgroundSvgPaths from \"../components/BackgroundSvgPaths\";\nimport LightenColours from \"../Helpers/LightenColours\";\n\n/**\n * Styles the Material-UI tooltips used on the page.\n * @type {React.ComponentType<Omit<JSX.LibraryManagedAttributes<*, React.ComponentProps<*>>, keyof ({theme: Theme} & {classes: ClassNameMap<ClassKeyOfStyles<\"arrow\"|\"tooltip\">>}) | {classes: ClassNameMap<ClassKeyOfStyles<\"arrow\"|\"tooltip\">>}> & StyledComponentProps<\"arrow\"|\"tooltip\">>}\n */\nconst LightTooltip = withStyles((theme) => ({\n    tooltip: {\n        backgroundColor: theme.palette.common.white,\n        color: 'rgba(0, 0, 0, 0.87)',\n        boxShadow: theme.shadows[1],\n        lineHeight: \"25px\",\n        textAlign: \"center\",\n    },\n    arrow: {\n        color: theme.palette.common.white,\n    }\n}))(Tooltip);\n\nclass SongResultsPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawFeatures: [],\n            rawAnalysis: [],\n            rawTrack: {\n                album: {\n                    id: \"null\"\n                },\n                available_markets: []\n            },\n            rawAlbum: [],\n            data: [],\n            options: [],\n            prompt: null,\n            invalid: false,\n            modality: \"\",\n            songCard: null,\n            bgImage: null,\n            explicit: null,\n            live: null,\n            instrumental: null,\n            musicality: null,\n            key: null,\n            artists: null,\n            albumColours1: \"white\",\n            albumColours2: \"white\",\n            albumColours3: \"white\",\n            albumColours4: \"white\",\n            embedAlbum: null,\n        }\n    }\n\n    componentDidMount = async () =>  {\n        await this.waitForFeatures();\n        await this.waitFortrack();\n        await this.waitForAlbum();\n        this.generateCharts();\n        this.setBgColours();\n    }\n\n    /**\n     * Pulls colour palette from the album artwork for the chosen song using Vibrant library, then sets the most prominent\n     * colours to the page state. These colours are then rendered as the background once the promise has been fulfilled.\n     */\n    setBgColours() {\n        // Get bg colours using Vibrant promise:\n        const img = document.querySelector('img');\n        img.crossOrigin = \"Anonymous\";\n        const colorThief = new ColorThief();\n        // Make sure image is finished loading\n        img.addEventListener('load', function() {\n            let colour = colorThief.getColor(img);\n            Vibrant.from(img).getPalette()\n                .then((palette) => {\n                    console.log(palette);\n                    let rgb1 = palette.Vibrant.getRgb();\n                    let rgb2 = palette.DarkVibrant.getRgb();\n                    let rgb3 = palette.DarkMuted.getRgb();\n                    let rgb4 = palette.Muted.getRgb();\n                    rgb1 = LightenColours.RGB_Linear_Shade(0.3, (\"rgb(\" + rgb1[0] + \",\" + rgb1[1] + \",\" + rgb1[2] + \")\"));\n                    rgb2 = LightenColours.RGB_Linear_Shade(0.3, (\"rgb(\" + rgb2[0] + \",\" + rgb2[1] + \",\" + rgb2[2] + \")\"));\n                    rgb3 = LightenColours.RGB_Linear_Shade(0.3, (\"rgb(\" + rgb3[0] + \",\" + rgb3[1] + \",\" + rgb3[2] + \")\"));\n                    rgb4 = LightenColours.RGB_Linear_Shade(0.3, (\"rgb(\" + rgb4[0] + \",\" + rgb4[1] + \",\" + rgb4[2] + \")\"));\n                    this.setState({\n                        albumColours1: rgb1,\n                        albumColours2: rgb2,\n                        albumColours3: rgb3,\n                        albumColours4: rgb4\n                    })}\n                )\n        }.bind(this));\n    }\n\n    /**\n     * Fetches track data from my API, pre-processes the data, and generates a song card of the data.\n     */\n    waitFortrack = async () => {\n        const songId = this.props.location.search;\n        const data = await FetchData.fetchData(songId.substring(1, songId.length), 'analysis', 'tracks/');\n        // Error handling if no search results are returned:\n        if (data.length === 0) {\n            this.setState({\n                prompt: \"Invalid song ID\",\n                invalid: true\n            });\n            return;\n        }\n        this.setState({\n            rawTrack: data,\n            embedAlbum: <iframe\n                src={\"https://open.spotify.com/embed/album/\" + data.album.id}\n                width=\"350\"\n                height=\"350\"\n                frameBorder=\"0\"\n                allowTransparency=\"true\"\n                allow=\"encrypted-media\"\n            ></iframe>\n        });\n\n        // Fetch my API endpoint for sorting and truncating track data for song card:\n        const sortTrackData = await fetch('/api/songSort/truncate', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        let response = await sortTrackData.json();\n\n        // Generate songcard and save it to state:\n        this.setState({\n            songCard: <SongCard\n                name={response.name}\n                album={response.album}\n                artist={response.artist}\n                artwork={this.state.rawTrack.album.images[1].url}\n            />,\n            explicit: response.expl,\n            artists: response.artists,\n        })\n\n    };\n\n    /*\n * todo:\n *  refactor some of this to helper\n */\n    waitForFeatures = async () => {\n        const songId = this.props.location.search;\n        const data = await FetchData.fetchData(songId.substring(1, songId.length), 'analysis', 'audio-features/');\n        // Error handling if no search results are returned:\n        if (data.length === 0) {\n            this.setState({\n                prompt: \"Invalid song ID\",\n                invalid: true\n            });\n            return;\n        }\n\n        // Fetch my API endpoint for sorting track feature data:\n        const sortTrackData = await fetch('/api/songSort/sortFeatures', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        let response = await sortTrackData.json();\n\n        this.setState({\n            rawFeatures: data,\n            live: response.live,\n            acoustic: response.acoustic,\n            instrumental: response.instrumental,\n            musicality: response.musicality,\n            key: response.key\n        });\n        if (data.mode === 1) {\n            this.setState({modality: \"Major\"})\n        } else if (data.mode === 0) {\n            this.setState({modality: \"Minor\"})\n        }\n    };\n\n    waitForAlbum = async () => {\n        if (this.state.invalid === true) {\n            return;\n        }\n        const songId = this.props.location.search;\n        const data = await FetchData.fetchData(this.state.rawTrack.album.id, 'analysis', 'albums/');\n        // Error handling if no search results are returned:\n        if (data.length === 0) {\n            this.setState({\n                prompt: \"Invalid song ID\",\n                invalid: true\n            });\n            return;\n        }\n        console.log(data);\n        this.setState({\n            rawAlbum: data,\n        });\n    };\n\n    generateCharts = async () => {\n        // Fetch my API endpoint for generating track feature chart:\n        const sortTrackData = await fetch('/api/songSort/generateChart', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.rawFeatures)\n        });\n        let response = await sortTrackData.json();\n        this.setState(response);\n    }\n\n    render() {\n        return (\n            <div className=\"Main\" style={{backgroundColor: this.state.albumColours1}}>\n                <div style={{width: \"1vw\", marginLeft: \"-1vw\"}}>\n                    <BackgroundSvgPaths fill={this.state.albumColours2}/>\n                    <BackgroundSvgPaths fill={this.state.albumColours3} shiftDown=\"-100vh\"/>\n                    <BackgroundSvgPaths fill={this.state.albumColours4} shiftDown=\"100vh\"/>\n                    <BackgroundSvgPaths fill={this.state.albumColours2} shiftDown=\"200vh\"/>\n                </div>\n                <div className=\"Header\">\n                    <p>Song Analysis</p>\n                    <p id=\"Song-card\">{this.state.songCard}</p>\n                </div>\n                <div className=\"Container\">\n                    <div style={{display: \"flex\", fontSize: \"2.5vh\", padding: \"1vh\", textAlign: \"left\", paddingLeft: \"3vh\", alignContent: \"left\"}}><InfoOutlinedIcon style={{paddingRight: \"0.3vw\"}} /> Hover over an item for more information.</div>\n                    <div>\n                        <h2>Song Mood Features:<button style={{display: \"flex\", marginLeft: \"2vw\"}}>What's this?</button></h2>\n                        <hr/>\n                        <p>\n                            <HorizontalBar className=\"Chart\" data={this.state.data} options={this.state.options}/>\n                        </p>\n                    </div>\n                    <div>\n                        <h2 style={{marginBottom: \"0vh\"}}>Musical information:</h2>\n                        <p style={{fontSize: \"1.9vh\", marginLeft: \"2vh\"}}/>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            Tempo of the song in beats per minute.\n                        </p>}>\n                            <p>Tempo: {Math.round(this.state.rawFeatures.tempo)} bpm</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            Time signature of the song.\n                        </p>}>\n                            <p>Time signature: {this.state.rawFeatures.time_signature}/4</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            Musical key of the song.\n                        </p>}>\n                            <p>Key: {this.state.key}</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            Modality of the song (Major or Minor).\n                        </p>}>\n                            <p>Modality: {this.state.modality}</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            Whether the song is acoustic or not. Spotify gives songs an 'Acousticness' rating on a scale of 0.0 - 1.0.\n                            The closer to 1.0 this value is, the higher the probability that the track is acoustic. The Acousticness rating\n                            for this track is {this.state.rawFeatures.acousticness}.\n                        </p>}>\n                            <p>Acoustic: {this.state.acoustic}</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            Whether the song is instrumental, or contains vocals. 'Instrumentalness' is given on a scale of 0.0 - 1.0.\n                            The closer to 1.0 this value is, the higher the probability that the track is purely instrumental. The\n                            'Instrumentalness' rating for this song is {this.state.rawFeatures.liveness}.\n                        </p>}>\n                        <p>Instrumental: {this.state.instrumental}</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            The musicality of a song is a measure of whether it contains music or people talking. 'Speechiness' is given on a scale of 0.0 - 0.1,\n                            and songs with high Speechiness are less musical and contain more spoken words. For example, a podcast would have a 'Speechiness'\n                            value greater than 0.66, and a normal song containing singing would have a value below 0.33. Rap and poetry fall somewhere in the middle.\n                            The possibilities for Musicality are \"Musical\", \"Musical and spoken\", or \"Spoken word\". This track has a Speechiness value\n                            of {this.state.rawFeatures.speechiness}.\n                        </p>}>\n                        <p>Musicality: {this.state.musicality}</p>\n                        </LightTooltip>\n                        <hr/>\n                    </div>\n                    <div>\n                        <h2>Song details:</h2>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            The name of the song.\n                        </p>}>\n                            <p>Name: {this.state.rawTrack.name}</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            All artists who created and collaborated on the song.\n                        </p>}>\n                            <p>Artists: {this.state.artists}</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            Whether the lyrics contain explicit content or not..\n                        </p>}>\n                            <p>Explicit lyrics: {this.state.explicit}</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            How popular the song is. This is a number between 0 and 100, with 100 being the most popular.\n                            Popularity is based on the total number of recent plays, meaning songs which were popular in the\n                            past might now have a low popularity rating. The popularity is relative, with the most popular\n                            song on Spotify having a popularity of 100, so songs with popularity ratings that seem quite low may actually\n                            be relatively popular.\n                        </p>}>\n                            <p>Popularity: {this.state.rawTrack.popularity}</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            Length of the song.\n                        </p>}>\n                            <p>Length: {((this.state.rawFeatures.duration_ms) / 1000 / 60).toFixed(2)} minutes</p>\n                        </LightTooltip>\n                        <hr/>\n                        <LightTooltip arrow=\"true\" enterTouchDelay=\"100\" title={<p className=\"Tooltip\">\n                            Whether the song is live or not. This is determined by the amount of 'audience noise' detected in the recording,\n                            on a scale of 0.0 - 1.0. The 'Liveness' rating for this track is {this.state.rawFeatures.liveness}.\n                        </p>}>\n                            <p>Live: {this.state.live}</p>\n                        </LightTooltip>\n                        <hr/>\n                    </div>\n                    <div style={{paddingBottom: \"0vh\", marginBottom: \"0vh\"}}>\n                        <h2>Album preview:</h2>\n                        <hr/>\n                        {this.state.embedAlbum}\n                    </div>\n                    <div>\n                        <h2>Album details:</h2>\n                        <hr/>\n                        <p>Name: {this.state.rawAlbum.name}</p>\n                        <hr/>\n                        <p>Release date: {this.state.rawAlbum.release_date}</p>\n                        <hr/>\n                        <p>Popularity: {this.state.rawAlbum.popularity}</p>\n                        <hr/>\n                        <p>Type: {this.state.rawAlbum.album_type}</p>\n                        <hr/>\n                        <p>Record label: {this.state.rawAlbum.label}</p>\n                        <hr/>\n                    </div>\n                    <div>\n                        <h2>Available regions:</h2>\n                        <hr/>\n                        <p style={{justifyContent: \"center\", display: \"flex\"}}>\n                            <ComposableMap style={{color: \"white\", height: \"42vh\", marginRight: \"2vw\"}}>\n                                <Geographies geography=\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\">\n                                    {({geographies}) => geographies.map(geo => {\n                                            const d = this.state.rawTrack.available_markets.find(s => s === geo.properties.ISO_A2);\n                                            return (\n                                                <Geography\n                                                    key={geo.rsmKey}\n                                                    geography={geo}\n                                                    fill={d ? \"darkred\" : \"white\"}\n                                                />\n                                            );\n                                        }\n                                    )}\n                                </Geographies>\n                            </ComposableMap>\n                        </p>\n                    </div>\n                    <div>\n                        <h2>Mood features explained:</h2>\n                        <hr/>\n                        <p>All mood feature data is taken from Spotify, who use algorithms to calculate the numbers shown.</p>\n                        <h2>Energy</h2>\n                        <p>\n                            The 'Energy' of a song determines how energetic the song feels, and is a measure of intensity and musical activity, with energetic\n                            tracks feeling fast, busy and noisy. Energy is calculated by taking into account the dynamic range,\n                            the loudness, the timbre, and the onset rate (rate of notes played). Energy is determined on a scale of 0 - 10,\n                            with 10 being the most energetic.\n                        </p>\n                        <h2>Danceability</h2>\n                        <p>\n                            The 'Danceability' of a song describes how good a track is to dance to. This takes into account\n                            a number of musical elements including tempo, how stable the rhythm is, the strength of each beat,\n                            and how regular the musical pattern is. Dancibility is determined on a scale of 0 - 10, with 10 being\n                            the most danceable.\n                        </p>\n                        <h2>Happiness</h2>\n                        <p>\n                            The happiness or 'Valence' of a song is how positive it sounds. Tracks with high valence sound more positive\n                            (happy, cheerful, euphoric) while tracks with low valence sound more negative (sad, depressed, angry).\n                            Happiness is determined on a scale of 0 - 10, with 10 being the most positive sounding.\n                        </p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SongResultsPage;","import {Bar} from \"react-chartjs-2\";\nimport React from \"react\";\n\nclass Histogram extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            histogram: null\n        }\n    }\n\n    componentDidMount() {\n        this.generateChart();\n    }\n\n    /**\n     * Generates a histogram for mood features, using pre-processed data provided through props which has been separated\n     * into bins of 0.5.\n     */\n    generateChart = async () => {\n        let input = {\n            data: this.props.data,\n            songIndex: this.props.songIndex\n        };\n        // Fetch my API endpoint for generating histograms for mood features:\n        const generateScore = await fetch('/api/plSort/generateHistogram', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(input)\n        });\n        let response = await generateScore.json();\n        console.log(response);\n\n        this.setState({\n            histogram: <Bar className=\"Chart\" data={response.chartData} options={response.chartOptions} height=\"300vh\" width=\"550vw\"/>\n        })\n    }\n\n    render() {\n        return (\n            this.state.histogram\n        )\n    }\n\n}\n\nexport default Histogram;","import React from 'react';\nimport FetchData from \"../Helpers/FetchData\";\nimport '../styles/PlaylistResultsPage.css'\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\nimport {HorizontalBar} from \"react-chartjs-2\";\nimport Histogram from \"../components/Histogram\";\nimport * as Vibrant from 'node-vibrant';\nimport BackgroundSvgPaths from \"../components/BackgroundSvgPaths\";\nimport ColorThief from 'color-thief';\nimport LightenColours from \"../Helpers/LightenColours\";\n\nclass PlaylistResultsPage extends React.Component {\n    /**\n     * Sets defaults so the page can load blank data before fetching data from the API and replacing the default values.\n     */\n    constructor() {\n        super();\n        this.state = {\n            danceHist: null,\n            energyHist: null,\n            valenceHist: null,\n            score: [],\n            chartData: [],\n            chartOptions: [],\n            featureInfo1: [],\n            featureInfo2: [],\n            featureInfoColour: [],\n            errorVis: \"hidden\",\n            fit: {\n                stDevs: [0, 0, 0],\n                sigmas: [0, 0, 0]\n            },\n            albumColours1: \"white\",\n            albumColours2: \"white\",\n            albumColours3: \"white\",\n            albumColours4: \"white\",\n        }\n    }\n\n    componentDidMount() {\n        this.waitFortracks();\n    }\n\n    waitFortracks = async () => {\n        // Fetch track data from my API:\n        const plTracks = await FetchData.fetchData('', 'analysis', 'playlists/' +\n            this.props.location.hash.substring(1, this.props.location.hash.length) + '/tracks');\n        let plTrackIds = '';\n        // Initialise counter for number of songs:\n        let n = 0;\n        // Generate search string from all track ids:\n        plTracks.items.forEach(track => {\n            n++;\n            // Limit results to chosen song + 100 songs from playlist:\n            if (n === 100 || track.track === null) {\n                return;\n            }\n            plTrackIds += track.track.id + ','\n        });\n        // Remove final comma:\n        plTrackIds = plTrackIds.substring(0, (plTrackIds.length) - 1);\n        // Index 0 is the song being fitted to the playlist.\n        // Fetch feature data from my API:\n        const featureData = await FetchData.fetchData(this.props.location.search.substring(1, this.props.location.search.length) +\n            ',' + plTrackIds, 'analysis', 'audio-features/?ids=');\n        // Error handling if no search results are returned:\n        if (featureData.length === 0) {\n            this.setState({\n                prompt: \"Invalid ID\",\n                invalid: true\n            });\n            return;\n        }\n        this.setBgColours();\n\n        // Fetch my API endpoint for sorting and pre-processing the data:\n        const sortData = await fetch('/api/plSort', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(featureData)\n        });\n        // Receive the sorted json data:\n        let response = await sortData.json();\n\n        // Fetch my API endpoint for generating the final fit score chart:\n        const generateScore = await fetch('/api/plFit/web', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(response.score)\n        });\n        let finalScore = await generateScore.json();\n\n        // Generate histograms and set the returned data to state:\n        this.setState({\n            score: response.score,\n            featureInfo1: response.featureInfo1,\n            featureInfo2: response.featureInfo2,\n            featureInfoColour: response.featureInfoColour,\n            fit: response.simplify.fit,\n            danceHist: <Histogram data={response.simplify.datasets.dance} songIndex={response.simplify.index.danceIndex}/>,\n            energyHist: <Histogram data={response.simplify.datasets.energy} songIndex={response.simplify.index.energyIndex}/>,\n            valenceHist: <Histogram data={response.simplify.datasets.valence} songIndex={response.simplify.index.valenceIndex}/>,\n            chartData: finalScore.chartData,\n            chartOptions: finalScore.chartOptions\n        })\n    };\n\n    /**\n     * Pulls colour palette from the album artwork for the chosen song using Vibrant library, then sets the most prominent\n     * colours to the page state. These colours are then rendered as the background once the promise has been fulfilled.\n     */\n    setBgColours() {\n        // Get bg colours using Vibrant promise:\n        const img = document.querySelector('img');\n        img.crossOrigin = \"Anonymous\";\n        const colorThief = new ColorThief();\n        // Make sure image is finished loading\n        img.addEventListener('load', function() {\n            let colour = colorThief.getColor(img);\n            Vibrant.from(img).getPalette()\n                .then((palette) => {\n                    let rgb1 = palette.Vibrant.getRgb();\n                    let rgb2 = palette.DarkVibrant.getRgb();\n                    let rgb3 = palette.DarkMuted.getRgb();\n                    let rgb4 = palette.Muted.getRgb();\n                    rgb1 = LightenColours.RGB_Linear_Shade(0.3, (\"rgb(\" + rgb1[0] + \",\" + rgb1[1] + \",\" + rgb1[2] + \")\"));\n                    rgb2 = LightenColours.RGB_Linear_Shade(0.3, (\"rgb(\" + rgb2[0] + \",\" + rgb2[1] + \",\" + rgb2[2] + \")\"));\n                    rgb3 = LightenColours.RGB_Linear_Shade(0.3, (\"rgb(\" + rgb3[0] + \",\" + rgb3[1] + \",\" + rgb3[2] + \")\"));\n                    rgb4 = LightenColours.RGB_Linear_Shade(0.3, (\"rgb(\" + rgb4[0] + \",\" + rgb4[1] + \",\" + rgb4[2] + \")\"));\n                    this.setState({\n                        albumColours1: rgb1,\n                        albumColours2: rgb2,\n                        albumColours3: rgb3,\n                        albumColours4: rgb4\n                    })}\n                )\n        }.bind(this));\n    }\n\n    //CHANGE: get new audio data every time, or the user can't bookmark this page ///////////////////////////////////////////\n    render() {\n        return (\n            <div className=\"Main-play\" style={{backgroundColor: this.state.albumColours1}}>\n                <div style={{width: \"1vw\", marginLeft: \"-1vw\"}}>\n                    <BackgroundSvgPaths fill={this.state.albumColours2}/>\n                    <BackgroundSvgPaths fill={this.state.albumColours3} shiftDown=\"-100vh\"/>\n                    <BackgroundSvgPaths fill={this.state.albumColours4} shiftDown=\"100vh\"/>\n                    <BackgroundSvgPaths fill={this.state.albumColours2} shiftDown=\"200vh\"/>\n                </div>\n                <div>\n                    <div className=\"Container-play\">\n                        <div style={{display: \"flex\", margin: \"0vh\", fontSize: \"2.5vh\", padding: \"0vh\", textAlign: \"left\", paddingLeft: \"3vh\", alignContent: \"left\", color: \"red\", visibility: this.state.errorVis}}><ErrorOutlineIcon style={{paddingRight: \"0.3vw\"}} />This playlist has less than 20 songs. Choose a playlist with more songs for a more accurate analysis.</div>\n                        <div>\n                            <h2>{this.props.location.state.name}</h2>\n                            <h2>{this.props.location.state.artist}</h2>\n                            <p/>\n                            <p style={{backgroundColor: \"white\", padding: \"0vh\", paddingLeft: \"0.25vw\", margin: \"1vw\"}}>\n                                <HorizontalBar data={this.state.chartData} options={this.state.chartOptions} height=\"60vh\"/>\n                            </p>\n                            <p>\n                                <p style={{fontSize: \"6vh\"}}>{Math.round((this.state.score/12) * 100)}% Fit!</p>\n                            </p>\n                        </div>\n                        <div style={{margin: \"0hv\", padding: \"0vh\", justifyContent: \"center\", display: \"flex\"}}>\n                            <p>\n                                <img src={this.props.location.state.art} style={{margin: \"2vh\", height: \"auto\", width: \"45vh\", border: \"0.3vh solid dimgrey\"}}/>\n                            </p>\n                        </div>\n                        <div className=\"Chart-play\">\n                            <p>{this.state.danceHist}</p>\n                        </div>\n                        <div>\n                            <h2>Danceability:<p style={{color: this.state.featureInfoColour[0], margin: \"0vh\", padding: \"1vh\"}}>{this.state.featureInfo1[0]}</p></h2>\n                            <hr/>\n                            <p>{this.state.featureInfo2[0]}</p>\n                        </div>\n                        <div>\n                            <p>{this.state.energyHist}</p>\n                        </div>\n                        <div>\n                            <h2>Energy:<p style={{color: this.state.featureInfoColour[1], margin: \"0vh\", padding: \"1vh\"}}>{this.state.featureInfo1[1]}</p></h2>\n                            <hr/>\n                            <p>{this.state.featureInfo2[1]}</p>\n                        </div>\n                        <div>\n                            <p>{this.state.valenceHist}</p>\n                        </div>\n                        <div>\n                            <h2>Positivity:<p style={{color: this.state.featureInfoColour[2], margin: \"0vh\", padding: \"1vh\"}}>{this.state.featureInfo1[2]}</p></h2>\n                            <hr/>\n                            <p>{this.state.featureInfo2[2]}</p>\n                        </div>\n                        <div id=\"Detail\">\n                            <h2>Mood features explained:</h2>\n                            <hr/>\n                            <p>All mood feature data is taken from Spotify, who use algorithms to calculate the numbers shown.</p>\n                            <h2>Energy</h2>\n                            <p>\n                                The 'Energy' of a song determines how energetic the song feels, and is a measure of intensity and musical activity, with energetic\n                                tracks feeling fast, busy and noisy. Energy is calculated by taking into account the dynamic range,\n                                the loudness, the timbre, and the onset rate (rate of notes played). Energy is determined on a scale of 0 - 10,\n                                with 10 being the most energetic.\n                            </p>\n                            <p>\n                                The standard deviation of Energy values for the songs in this playlist is {this.state.fit.stDevs[1].toFixed(3)}.\n                                The Energy of your song falls within {this.state.fit.sigmas[1]} σ (sigma) of the distribution.\n                            </p>\n                            <h2>Danceability</h2>\n                            <p>\n                                The 'Danceability' of a song describes how good a track is to dance to. This takes into account\n                                a number of musical elements including tempo, how stable the rhythm is, the strength of each beat,\n                                and how regular the musical pattern is. Dancibility is determined on a scale of 0 - 10, with 10 being\n                                the most danceable.\n                            </p>\n                            <p>\n                                The standard deviation of Danceability values for the songs in this playlist is {this.state.fit.stDevs[0].toFixed(3)}.\n                                The danceability of your song falls within {this.state.fit.sigmas[0]} σ (sigma) of the distribution.\n                            </p>\n                            <h2>Happiness</h2>\n                            <p>\n                                The happiness or 'Valence' of a song is how positive it sounds. Tracks with high valence sound more positive\n                                (happy, cheerful, euphoric) while tracks with low valence sound more negative (sad, depressed, angry).\n                                Happiness is determined on a scale of 0 - 10, with 10 being the most positive sounding.\n                            </p>\n                            <p>\n                                The standard deviation of Positivity values for the songs in this playlist is {this.state.fit.stDevs[2].toFixed(3)}.\n                                The Positivity of your song falls within {this.state.fit.sigmas[2]} σ (sigma) of the distribution.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PlaylistResultsPage;","import React from 'react';\nimport {BrowserRouter as Router, Route, Redirect, Switch, Link } from \"react-router-dom\";\nimport HomePage from \"./routes/HomePage\";\nimport SongSearchPage from \"./routes/SongSearchPage\";\nimport PlaylistSearchPage from \"./routes/PlaylistSearchPage\";\nimport AboutPage from \"./routes/AboutPage\";\nimport SongResultsPage from \"./routes/SongResultsPage\";\nimport PlaylistResultsPage from \"./routes/PlaylistResultsPage\";\nimport './styles/App.css';\nimport BackgroundSvgPaths from \"./components/BackgroundSvgPaths\";\nimport FetchData from \"./Helpers/FetchData\";\n\n/**\n * Main page of the app. Only handles routing, then gets passed to index.js for rendering.\n */\nclass App extends React.Component {\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <Router>\n                <nav className=\"Navbar\">\n                    <ul>\n                        <li style={{float: \"left\", fontSize: \"3vh\"}}><Link to=\"/\">SongMap</Link></li>\n                        <li><Link to=\"/about\">About</Link></li>\n                        <li><Link to=\"/contact\">Contact</Link></li>\n                        <li><Link to=\"/playlist\">Playlist Analyser</Link></li>\n                        <li><Link to=\"/song\">Song Analyser</Link></li>\n                    </ul>\n                </nav>\n                <Switch>\n                    <Route path=\"/\" exact component={HomePage}/>\n                    <Route path=\"/songs\" component={SongResultsPage}/>\n                    <Route path=\"/playlists\" component={PlaylistResultsPage}/>\n                    <Route path=\"/song-playlist\" component={PlaylistSearchPage}/>\n                    <Route path=\"/about\" component={AboutPage}/>\n                    <Route path=\"/song\"   render={(props) => (\n                        <SongSearchPage {...props} chain=\"song\" />\n                    )}/>\n                    <Route path=\"/playlist\" render={(props) => (\n                        <SongSearchPage {...props} chain=\"playlist\" />\n                    )}/>\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/hellify.aede5c89.png\";"],"sourceRoot":""}