{"version":3,"sources":["components/FetchSearchData.js","components/SongCard.js","routes/SearchPage.js","serviceWorker.js","routes/HomePage.js","routes/SongPage.js","routes/PlaylistPage.js","routes/AboutPage.js","components/FetchTrackFeatures.js","routes/SongResultsPage.js","routes/PlaylistResultsPage.js","App.js","index.js","hellify.png"],"names":["FetchSearchData","fetchData","searchQuery","searchType","a","data","getToken","fetch","response","json","body","status","Error","message","requestToken","token","myToken","myOptions","headers","Authorization","replace","console","log","url","SongCard","className","onClick","this","props","buttonClick","rowSpan","src","artwork","alt","style","opacity","position","maxWidth","maxHeight","overflow","textIndent","height","width","name","album","artist","backgroundImage","React","Component","SearchPage","handleSubmit","event","preventDefault","state","setState","previousSearchQuery","waitForFetch","setTimeout","prompt","id","window","clearTimeout","songListRaw","tracks","items","length","results","generateSongInfo","populateGrid","simplifiedSongList","handleChange","bind","onCardClick","target","value","songId","history","push","pathname","search","songs","forEach","song","artists","art","images","cardGrid","i","substring","key","hellify","onSubmit","type","placeholder","onChange","marginTop","top","Boolean","location","hostname","match","HomePage","SongPage","PlaylistPage","AboutPage","FetchTrackFeatures","SongResultsPage","chartData","labels","datasets","label","backgroundColor","borderColor","acousticness","danceability","energy","liveness","speechiness","valence","PlaylistResultsPage","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.fc585b5e.chunk.js","sourcesContent":["class FetchSearchData {\n    /**\n     * Calls Spotify API using token. Takes a search query string and a string\n     * for search type (track, artist, playlist etc).\n     * @returns {Promise<void>}\n     */\n    static fetchData = async (searchQuery, searchType) => {\n        let data = '';\n        /**\n         * Calls my node server which requests a Spotify client access token.\n         * @returns {Promise<any>} Json body containing Spotify client token and test message\n         */\n        const getToken = async () => {\n            const response = await fetch('/authenticate');\n            const body = await response.json();\n\n            if (response.status !== 200) {\n                throw Error(body.message)\n            }\n            return body;\n        };\n        const requestToken = await getToken();\n        const token = requestToken.myToken;\n        var myOptions = {\n            headers: {\n                Authorization: 'Bearer ' + token\n            }\n        }\n        // Replaces special characters in query:\n        searchQuery = searchQuery.replace(/\\\\|#|%|{|}|\\^|\\||`/g, \"\")\n        console.log(searchQuery)\n        const endpoint = 'https://api.spotify.com/v1/search?';\n        const query = 'q=' + searchQuery;\n        const type = '&type=' + searchType;\n        const url = endpoint + query + type;\n\n        const response = await fetch(url, myOptions)\n        data = await response.json();\n        console.log(data);\n        return data;\n    }\n}\n\nexport default FetchSearchData;","import React from 'react';\nimport '../styles/SongCard.css';\n\nclass SongCard extends React.Component {\n    onCardClick() {\n        //console.log(this.props.name)\n    }\n\n    render() {\n        return (\n            <div className=\"Result-card\" onClick={this.props.buttonClick}>\n                <table className=\"Card-table\">\n                    <tr className=\"Class-row\">\n                        <td rowSpan=\"0\" className=\"Col-art\">\n                            <img className=\"Album-art\" src={this.props.artwork} alt=\"album artwork\"></img>\n                        </td>\n                        <div style={{opacity: 0.25, position: \"absolute\", maxWidth: \"21vh\", maxHeight: \"18vh\", overflow: \"hidden\", textIndent: \"-10vh\"}}>\n                        <img src={this.props.artwork} style={{height: \"45vh\", width: \"45vh\"}} alt=\"album art\"/>\n                        </div>\n                        <td className=\"Song-info\">\n                            <div className=\"Info-name\" >{this.props.name}</div>\n                            <div className=\"Info\" >{this.props.album}</div>\n                            <div className=\"Info\">{this.props.artist}</div>\n                        </td>\n                        <div style={{backgroundImage: \"url(\" + this.props.artwork + \")\", opacity: 0.2}}>\n\n                        </div>\n                    </tr>\n                </table>\n            </div>\n        );\n    }\n\n}\n\nexport default SongCard;","import React from 'react';\nimport hellify from '../hellify.png';\nimport '../styles/SearchPage.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport FetchSearchData from '../components/FetchSearchData';\nimport SongCard from \"../components/SongCard\";\n\nclass SearchPage extends React.Component {\n  /**\n   * Default constructor for main app.\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: 'NO_TOKEN(CLIENT)',\n      songListRaw: null,\n      simplifiedSongList: null,\n      searchQuery: '',\n      previousSearchQuery: '',\n      results: <div className=\"Margin\" ></div>,\n      prompt: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onCardClick = this.onCardClick.bind(this);\n  }\n\n  /**\n   * Updates the state {searchQuery} whenever a letter is typed in the search box.\n   * @param onChange event for search box input\n   */\n  handleChange(event) {\n    this.setState({ searchQuery: event.target.value });\n  }\n\n  /**\n   * Handles submit of search query.\n   * @param onSubmit event for search submit.\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    // Don't fetch if there is no query:\n    if (this.state.searchQuery === \"\") {\n      return;\n    }\n    this.setState({previousSearchQuery: this.state.searchQuery})\n    if (this.state.searchQuery == this.state.previousSearchQuery) {\n      return\n    }\n\n    this.waitForFetch();\n  }\n\n  waitForFetch = async () => {\n    // Set timeout for 'searching' message to appear:\n    setTimeout(() => {\n      this.setState({\n        prompt: \"Searching for results...\"\n      });\n    }, 1000);\n    const data = await FetchSearchData.fetchData(this.state.searchQuery, 'track');\n    // Clear all timeouts (as search is complete):\n    let id = setTimeout(function() {}, 0);\n    while (id--) {\n      window.clearTimeout(id);\n      this.setState({\n        prompt: null\n      });\n    }\n    this.setState({songListRaw: data})\n    // Error handling if no search results are returned:\n    if (data.tracks.items.length === 0) {\n      this.setState({\n        prompt: \"No results found!\",\n        results: <div className=\"Margin\" ></div>\n      });\n      return;\n    }\n    this.generateSongInfo();\n    this.setState({\n      results:\n          <div className=\"Cards\" >\n            {this.populateGrid(this.state.simplifiedSongList)}\n          </div>\n    })\n  };\n\n  /**\n   * When a song card is clicked, redirect to the results page passing the song id as the react router\n   * history object prop 'props.location.search'.\n   * @param songId\n   */\n  onCardClick(songId) {\n    console.log(\"Click successful!! ID: \" + songId)\n    this.props.history.push({\n      pathname: '/song',\n      search: songId\n    });\n  }\n\n  generateSongInfo() {\n    const songs = []\n\n    this.state.songListRaw.tracks.items.forEach(song => {\n          songs.push({\n            name: song.name,\n            artist: song.artists[0].name,\n            album: song.album.name,\n            art: song.album.images[1].url,\n            songId: song.id\n          });\n        }\n    );\n    this.setState({simplifiedSongList: songs})\n  }\n\n  populateGrid(data) {\n    // Else generate cards.\n    if (data == null) {\n      return null;\n    }\n    var cardGrid = [];\n    for (var i=0; i < data.length; i++) {\n\n      let name = data[i].name;\n      let album = data[i].album;;\n      let artist = data[i].artist;\n      let songId = data[i].songId;\n      // Truncate info if it is too long to fit on card:\n      if (data[i].name.length > 30) {\n        name = data[i].name.substring(0, 30) + '...'\n      }\n      if (data[i].album.length > 20) {\n        album = data[i].album.substring(0, 20) + '...'\n      }\n      if (data[i].artist.length > 40) {\n        artist = data[i].artist.substring(0, 40) + '...'\n      }\n\n      cardGrid.push(\n          <p key={i} ><SongCard\n              buttonClick={this.onCardClick.bind(this, songId)}\n              name={name}\n              album={album}\n              artist={artist}\n              artwork={data[i].art}\n              songId={songId}\n          /></p>\n      )\n    }\n    return cardGrid;\n  }\n\n  /**\n   * Renders main page to the DOM.\n   */\n  render() {\n    return (\n        <Router>\n          <div className=\"Search\">\n            <header className=\"Search-header\" >\n              <img src={hellify} className=\"Search-logo\" alt=\"logo\"/>\n              <p>Search for a song to get started!</p>\n              <div className=\"searchbar\">\n                <form onSubmit={this.handleSubmit}>\n                  <input className=\"Search-box\" type=\"text\" value={this.state.value} placeholder=\"Search..\" onChange={this.handleChange}></input>\n                  <button id=\"searchclick\" type=\"submit\">Search</button>\n                </form>\n              </div>\n              <div style={{marginTop: \"3vh\", position: \"absolute\", top: \"35vh\"}}>\n                {this.state.prompt}\n              </div>\n            </header>\n            {this.state.results}\n          </div>\n        </Router>\n    );\n  }\n}\n\nexport default SearchPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. SearchPage is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport hellify from \"../hellify.png\";\nimport '../styles/HomePage.css';\n\n/**\n * Takes song data as props and produces card elements for all data entered. Renders the card grid to he DOM.\n */\nclass HomePage extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={hellify} className=\"App-logo\" alt=\"logo\"/>\n                    <div className=\"row\">\n                        <div className=\"column\">\n                            <h1>Explore your song</h1>\n                            <p className=\"column\">Discover detailed analytics for your music.\n                                Go deeper and find out what Spotify's algorithms say about your songs!</p>\n                        </div>\n                        <div className=\"column\">\n                            <h1>Find the right playlist for your song</h1>\n                            <p className=\"column\">Hello!</p>\n                        </div>\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default HomePage;","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\n\nclass SongPage extends React.Component {\n    render() {\n        return (\n            <div>\n                Song Analyser\n            </div>\n        )\n    }\n}\n\nexport default SongPage;","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\n\nclass PlaylistPage extends React.Component {\n    render() {\n        return (\n            <div>\n                Playlist Analyser\n            </div>\n        )\n    }\n}\n\nexport default PlaylistPage;","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\n\nclass AboutPage extends React.Component {\n    render() {\n        return (\n            <div>\n                About {this.props.search}\n            </div>\n        )\n    }\n}\n\nexport default AboutPage;","class FetchTrackFeatures {\n    /**\n     * Calls Spotify API using token.\n     * @returns {Promise<void>}\n     */\n    static fetchData = async (songId) => {\n        let data = '';\n        /**\n         * Calls my node server which requests a Spotify client access token.\n         * @returns {Promise<any>} Json body containing Spotify client token and test message\n         */\n        const getToken = async () => {\n            const response = await fetch('/authenticate');\n            const body = await response.json();\n\n            if (response.status !== 200) {\n                throw Error(body.message)\n            }\n            return body;\n        };\n        const requestToken = await getToken();\n        const token = requestToken.myToken;\n        var myOptions = {\n            headers: {\n                Authorization: 'Bearer ' + token\n            }\n        }\n        // Replaces special characters in query:\n        const endpoint = 'https://api.spotify.com/v1/audio-features/';\n        const id = songId;\n        const url = endpoint + id;\n\n        const response = await fetch(url, myOptions)\n        data = await response.json();\n        return data;\n    }\n}\n\nexport default FetchTrackFeatures;","import React from 'react';\nimport FetchTrackFeatures from \"../components/FetchTrackFeatures\";\nimport \"../styles/SongResultsPage.css\";\nimport { Bar } from 'react-chartjs-2';\n\n// this.props.location.search gives the song id!!!\nclass SongResultsPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: null\n        }\n    }\n\n    waitForFetch = async () => {\n        const songId = this.props.location.search;\n        const data = await FetchTrackFeatures.fetchData(songId.substring(1, songId.length));\n        // Error handling if no search results are returned:\n        if (data.length === 0) {\n            this.setState({\n                prompt: \"No results found!\",\n                results: <div className=\"Margin\" ></div>\n            });\n            return;\n        }\n        const chartData = {\n            labels: [\"Acousticness\", \"Dancability\", \"Energy\", \"Liveness\", \"Speechiness\", \"Valence\"],\n            datasets: [{\n                label: \"Song features\",\n                backgroundColor: 'rgb(255, 99, 132)',\n                borderColor: 'rgb(255, 99, 132)',\n                data: [data.acousticness, data.danceability, data.energy, data.liveness, data.speechiness, data.valence]\n            }]\n        }\n        this.setState({data: chartData})\n        console.log(data);\n    };\n\n    componentDidMount() {\n        this.waitForFetch();\n    }\n\n    render() {\n        return (\n            <div className=\"Main\">\n                Song Features:\n                <div className=\"Chart\">\n                    <Bar data={this.state.data}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SongResultsPage;","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\n\nclass PlaylistResultsPage extends React.Component {\n    render() {\n        return (\n            <div>\n                Song Analyser\n            </div>\n        )\n    }\n}\n\nexport default PlaylistResultsPage;","import React from 'react';\nimport {BrowserRouter as Router, Route, Redirect, Switch} from \"react-router-dom\";\nimport HomePage from \"./routes/HomePage\";\nimport SearchPage from \"./routes/SearchPage\";\nimport SongPage from \"./routes/SongPage\";\nimport PlaylistPage from \"./routes/PlaylistPage\";\nimport AboutPage from \"./routes/AboutPage\";\nimport SongResultsPage from \"./routes/SongResultsPage\";\nimport PlaylistResultsPage from \"./routes/PlaylistResultsPage\";\n\n/**\n * Main page of the app. Only handles routing, then gets passed to index.js for rendering.\n */\nclass App extends React.Component {\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path=\"/\" exact component={SearchPage}/>\n                    <Route path=\"/home\" component={HomePage}/>\n                    <Route path=\"/songs\" component={SongPage}/>\n                    <Route path=\"/playlists\" component={PlaylistPage}/>\n                    <Route path=\"/about\" component={AboutPage}/>\n                    <Route path=\"/song\" component={SongResultsPage}/>\n                    <Route path=\"/playlist\" exact component={PlaylistResultsPage}/>\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport SearchPage from './routes/SearchPage';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/hellify.aede5c89.png\";"],"sourceRoot":""}