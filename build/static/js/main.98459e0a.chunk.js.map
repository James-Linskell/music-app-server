{"version":3,"sources":["hellify.png","components/SongCard.js","components/CardMaker.js","routes/HomePage.js","components/FetchSearchData.js","routes/ResultsPage.js","routes/SearchPage.js","serviceWorker.js","index.js"],"names":["module","exports","SongCard","className","rowSpan","src","this","props","artwork","alt","style","opacity","position","maxWidth","maxHeight","overflow","textIndent","height","width","name","album","artist","backgroundImage","React","Component","CardMaker","data","cardGrid","i","length","substring","push","key","art","populateGrid","HomePage","GiSoundWaves","FetchSearchData","fetchData","searchQuery","searchType","a","getToken","fetch","response","json","body","status","Error","message","requestToken","token","myToken","myOptions","headers","Authorization","replace","console","log","url","SearchPage","handleSubmit","event","preventDefault","state","waitForFetch","setTimeout","setState","results","id","window","clearTimeout","songListRaw","tracks","items","generateSongInfo","simplifiedSongList","currentRoute","handleChange","bind","target","value","songs","forEach","song","artists","images","hellify","onSubmit","type","placeholder","onChange","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.98459e0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hellify.aede5c89.png\";","import React from 'react';\nimport '../styles/SongCard.css';\n\nclass SongCard extends React.Component {\n    render() {\n        return (\n            <div className=\"Result-card\">\n                <table className=\"Card-table\">\n                    <tr className=\"Class-row\">\n                        <td rowSpan=\"0\" className=\"Col-art\">\n                            <img className=\"Album-art\" src={this.props.artwork} alt=\"album artwork\"></img>\n                        </td>\n                        <div style={{opacity: 0.25, position: \"absolute\", maxWidth: \"21vh\", maxHeight: \"18vh\", overflow: \"hidden\", textIndent: \"-10vh\"}}>\n                        <img src={this.props.artwork} style={{height: \"45vh\", width: \"45vh\"}} alt=\"album art\"/>\n                        </div>\n                        <td className=\"Song-info\">\n                            <div className=\"Info-name\" >{this.props.name}</div>\n                            <div className=\"Info\" >{this.props.album}</div>\n                            <div className=\"Info\">{this.props.artist}</div>\n                        </td>\n                        <div style={{backgroundImage: \"url(\" + this.props.artwork + \")\", opacity: 0.2}}>\n\n                        </div>\n                    </tr>\n                </table>\n            </div>\n        );\n    }\n\n}\n\nexport default SongCard;","import React from 'react';\nimport SongCard from \"./SongCard\";\n\n/**\n * Takes song data as props and produces card elements for all data entered. Renders the card grid to he DOM.\n */\nclass CardMaker extends React.Component {\n    populateGrid() {\n        // Else generate cards.\n        if (this.props.data == null) {\n            return null;\n        }\n        var cardGrid = [];\n        for (var i=0; i < this.props.data.length; i++) {\n\n            let name = this.props.data[i].name;\n            let album = this.props.data[i].album;;\n            let artist = this.props.data[i].artist;\n            // Truncate info if it is too long to fit on card:\n            if (this.props.data[i].name.length > 30) {\n                name = this.props.data[i].name.substring(0, 30) + '...'\n            }\n            if (this.props.data[i].album.length > 20) {\n                album = this.props.data[i].album.substring(0, 20) + '...'\n            }\n            if (this.props.data[i].artist.length > 40) {\n                artist = this.props.data[i].artist.substring(0, 40) + '...'\n            }\n\n            cardGrid.push(\n                <p key={i} ><SongCard\n                    name={name}\n                    album={album}\n                    artist={artist}\n                    artwork={this.props.data[i].art}\n                /></p>\n            )\n        }\n        return cardGrid;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.populateGrid()}\n            </div>\n        );\n    }\n}\n\nexport default CardMaker;","import React from 'react';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport '../styles/HomePage.css';\nimport {GiSoundWaves} from \"react-icons/gi\";\n\n/**\n * Takes song data as props and produces card elements for all data entered. Renders the card grid to he DOM.\n */\nclass HomePage extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={GiSoundWaves} className=\"App-logo\" alt=\"logo\"/>\n                    <div className=\"row\">\n                        <div className=\"column\">\n                            <h1>Explore your song</h1>\n                            <p className=\"column\">Discover detailed analytics for your music.\n                                Go deeper and find out what Spotify's algorithms say about your songs!</p>\n                        </div>\n                        <div className=\"column\">\n                            <h1>Find the right playlist for your song</h1>\n                            <p className=\"column\">Hello!</p>\n                        </div>\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default HomePage;","class FetchSearchData {\n    /**\n     * Calls Spotify API using token. Takes a search query string and a string\n     * for search type (track, artist, playlist etc).\n     * @returns {Promise<void>}\n     */\n    static fetchData = async (searchQuery, searchType) => {\n        let data = '';\n        /**\n         * Calls my node server which requests a Spotify client access token.\n         * @returns {Promise<any>} Json body containing Spotify client token and test message\n         */\n        const getToken = async () => {\n            const response = await fetch('/authenticate');\n            const body = await response.json();\n\n            if (response.status !== 200) {\n                throw Error(body.message)\n            }\n            return body;\n        };\n        const requestToken = await getToken();\n        const token = requestToken.myToken;\n        var myOptions = {\n            headers: {\n                Authorization: 'Bearer ' + token\n            }\n        }\n        // Replaces special characters in query:\n        searchQuery = searchQuery.replace(/\\\\|#|%|{|}|\\^|\\||`/g, \"\")\n        console.log(searchQuery)\n        const endpoint = 'https://api.spotify.com/v1/search?';\n        const query = 'q=' + searchQuery;\n        const type = '&type=' + searchType;\n        const url = endpoint + query + type;\n\n        const response = await fetch(url, myOptions)\n        data = await response.json();\n        console.log(data);\n        return data;\n    }\n}\n\nexport default FetchSearchData;","import React from 'react';\nimport CardMaker from \"../components/CardMaker\";\nimport '../styles/ResultsPage.css';\n\n/**\n * Takes song data as props and produces card elements for all data entered. Renders the card grid to he DOM.\n */\nclass ResultsPage extends React.Component {\n    render() {\n        return (\n            <div className=\"Cards\">\n                <p>Results</p>\n                <CardMaker data={this.props.data} />\n            </div>\n        );\n    }\n}\n\nexport default ResultsPage;","import React from 'react';\nimport hellify from '../hellify.png';\nimport '../styles/SearchPage.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport CardMaker from '../components/CardMaker';\nimport HomePage from \"../routes/HomePage\";\nimport ResultsPage from \"../routes/ResultsPage\";\nimport FetchSearchData from '../components/FetchSearchData';\n\nclass SearchPage extends React.Component {\n  /**\n   * Default constructor for main app.\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: 'NO_TOKEN(CLIENT)',\n      songListRaw: null,\n      simplifiedSongList: null,\n      searchQuery: '',\n      currentRoute: null,\n      results: <div className=\"Margin\" ></div>\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  /**\n   * Updates the state {searchQuery} whenever a letter is typed in the search box.\n   * @param onChange event for search box input\n   */\n  handleChange(event) {\n    this.setState({ searchQuery: event.target.value });\n  }\n\n  /**\n   * Handles submit of search query.\n   * @param onSubmit event for search submit.\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    // Don't fetch if there is no query:\n    if (this.state.searchQuery === \"\") {\n      return;\n    }\n      //return;\n\n    this.waitForFetch();\n  }\n\n  waitForFetch = async () => {\n    // Set timeout for 'searching' message to appear:\n    setTimeout(() => {\n      this.setState({\n        results:\n            <div className=\"Margin\" >\n              Searching for results...\n            </div>\n      });\n    }, 1000);\n    const data = await FetchSearchData.fetchData(this.state.searchQuery, 'track');\n    // Clear all timeouts (as search is complete):\n    let id = setTimeout(function() {}, 0);\n    while (id--) {\n      window.clearTimeout(id);\n    }\n    this.setState({songListRaw: data})\n    // Error handling if no search results are returned:\n    if (data.tracks.items.length === 0) {\n      this.setState({\n        results:\n            <div className=\"Margin\" >\n              No results found!\n            </div>\n      });\n      return;\n    }\n    this.generateSongInfo();\n    this.setState({\n      results:\n          <div className=\"Cards\" >\n            <CardMaker data={this.state.simplifiedSongList} />\n          </div>\n    })\n  };\n\n  generateSongInfo() {\n    const songs = []\n    this.state.songListRaw.tracks.items.forEach(song => {\n        songs.push({\n          name: song.name,\n          artist: song.artists[0].name,\n          album: song.album.name,\n          art: song.album.images[1].url\n        });\n      }\n    );\n    this.setState({simplifiedSongList: songs})\n  }\n\n  /**\n   * Renders main page to the DOM.\n   */\n  render() {\n    return (\n        <Router>\n          <div className=\"Search\">\n            <header className=\"Search-header\" >\n              <img src={hellify} className=\"Search-logo\" alt=\"logo\"/>\n              <p>Search for a song to get started!</p>\n              <div className=\"searchbar\">\n                <form onSubmit={this.handleSubmit}>\n                  <input type=\"text\" value={this.state.value} placeholder=\"Search..\" onChange={this.handleChange}></input>\n                  <button id=\"searchclick\" type=\"submit\">Search</button>\n                </form>\n              </div>\n            </header>\n            {this.state.results}\n            <div>\n              <Route path=\"/\" exact component={this.state.currentRoute}/>\n              <Route path=\"/home\" component={HomePage}/>\n            </div>\n          </div>\n        </Router>\n    );\n  }\n}\n\nexport default SearchPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. SearchPage is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport SearchPage from './routes/SearchPage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SearchPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}